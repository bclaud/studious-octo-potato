defmodule InstalacaoSolar.Analises.Instalacao do
  use Ash.Resource,
    data_layer: AshPostgres.DataLayer,
    extensions: [AshJsonApi.Resource, AshGraphql.Resource]

  graphql do
    type :instalacao

    queries do
      get :get_instalacao, :read
      list :list_instalacao, :read
    end
  end

  postgres do
    table "instalacoes"
    repo InstalacaoSolar.Repo
  end

  json_api do
    type "instalacao"

    routes do
      base("/instalacao")

      get :read

      index :read

      patch :update
      post :finish, route: "/finish"
    end
  end

  actions do
    defaults [:read, :create, :update, :destroy]
    # pra passar por essa action, teria que usar o Ash.Changeset.for_create()
    create :open do
      # by default you can provide all public attributes to an action
      # this action should only accpet the subject
      # pelo o que eu entendi seria um changeset que descreve uma acao
      # Como por exemplo, aprovar uma instalacao (nao fiz assim ainda)
      # ele limita os attributos que poderia receber
      accept [:nome_inversor]
    end

    # read :read do
      # por default nao adiciona paginacao, dessa forma da pra adicionar e chamar
      # pela api como por exemplo Api.read!(Instalacao, page: [limit: 10, offset: 30])
      # primary? true

      # pagination do
      #   keyset? true
      #   countable :by_default
      # end

    # end
    update :rename_inversor do
      accept [:nome_inversor]
    end

    create :finish do
      # we don't want to accept any input here
      accept []

      change set_attribute(:status, :finished)
      # A custom change could be added like so:
      #
      # change MyCustomChange
      # change {MyCustomChange, opt: :val}
    end

    update :start do
      accept []

      change set_attribute(:status, :in_progress)
    end

    update :reopen do
      accept []

      change set_attribute(:status, :not_started)
    end

    update :evaluate do
      accept [:score]
    end
  end

  attributes do # Add an autogenerated UUID primary key called :id uuid_primary_key :id
    uuid_primary_key :id 
    

    attribute :nome_inversor, :string do
      allow_nil? false
    end

    # simulando status de uma analise de instalacao
    attribute :status, :atom do
      # Constraints allow you to provide extra rules for the value.
      # The available constraints depend on the type
      # See the documentation for each type to know what constraints are available
      # Since atoms are generally only used when we know all of the values
      # it provides a `one_of` constraint, that only allows those values
      constraints one_of: [:finished, :in_progress, :not_started]

      default :not_started

      allow_nil? false
    end

    attribute :score, :integer do
      allow_nil? true
      constraints min: 0, max: 100
    end

    create_timestamp :inserted_at
    update_timestamp :updated_at
  end
end
